https://www.programiz.com/sql/online-compiler/

-- Створення таблиць
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    age INT,
    country VARCHAR(50)
);

CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    item VARCHAR(100),
    amount DECIMAL(10,2),
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Shippings (
    shipping_id INT PRIMARY KEY,
    status VARCHAR(50),
    customer INT,
    FOREIGN KEY (customer) REFERENCES Customers(customer_id)
);

-- Додавання даних
INSERT INTO Customers (customer_id, first_name, last_name, age, country) VALUES
(1, 'John', 'Doe', 31, 'USA'),
(2, 'Robert', 'Luna', 22, 'USA'),
(3, 'David', 'Robinson', 22, 'UK'),
(4, 'John', 'Reinhardt', 25, 'UK'),
(5, 'Betty', 'Doe', 28, 'UAE');

INSERT INTO Orders (order_id, item, amount, customer_id) VALUES
(1, 'Keyboard', 400, 4),
(2, 'Mouse', 300, 4),
(3, 'Monitor', 12000, 3),
(4, 'Keyboard', 400, 1),
(5, 'Mousepad', 250, 2);

INSERT INTO Shippings (shipping_id, status, customer) VALUES
(1, 'Pending', 2),
(2, 'Pending', 4),
(3, 'Delivered', 3),
(4, 'Pending', 5),
(5, 'Delivered', 1);

-- Вибірка даних
SELECT * FROM Customers;
SELECT * FROM Orders WHERE customer_id = 4;
SELECT Customers.first_name, Customers.last_name, Orders.item, Orders.amount
FROM Customers
JOIN Orders ON Customers.customer_id = Orders.customer_id;
SELECT Customers.first_name, Customers.last_name, Shippings.status
FROM Customers
JOIN Shippings ON Customers.customer_id = Shippings.customer
WHERE Shippings.status = 'Pending';
SELECT country, COUNT(*) AS total_customers
FROM Customers
GROUP BY country;
SELECT customer_id, COUNT(*) AS total_orders
FROM Orders
GROUP BY customer_id
HAVING COUNT(*) > 1;

-- Оновлення даних
UPDATE Shippings
SET status = 'Delivered'
WHERE customer = 2;
UPDATE Orders
SET amount = 12500
WHERE item = 'Monitor';

-- Видалення даних
DELETE FROM Customers WHERE customer_id = 5;
DELETE FROM Orders WHERE amount < 500;

-- Видалення таблиць
DROP TABLE Shippings;
DROP TABLE Orders;
DROP TABLE Customers;


-- Створення таблиць
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    age INT,
    country VARCHAR(50)
);

CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    item VARCHAR(100),
    amount DECIMAL(10,2),
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Shippings (
    shipping_id INT PRIMARY KEY,
    status VARCHAR(50),
    customer INT,
    FOREIGN KEY (customer) REFERENCES Customers(customer_id)
);

-- Додавання даних
INSERT INTO Customers (customer_id, first_name, last_name, age, country) VALUES
(1, 'John', 'Doe', 31, 'USA'),
(2, 'Robert', 'Luna', 22, 'USA'),
(3, 'David', 'Robinson', 22, 'UK'),
(4, 'John', 'Reinhardt', 25, 'UK'),
(5, 'Betty', 'Doe', 28, 'UAE');

INSERT INTO Orders (order_id, item, amount, customer_id) VALUES
(1, 'Keyboard', 400, 4),
(2, 'Mouse', 300, 4),
(3, 'Monitor', 12000, 3),
(4, 'Keyboard', 400, 1),
(5, 'Mousepad', 250, 2);

INSERT INTO Shippings (shipping_id, status, customer) VALUES
(1, 'Pending', 2),
(2, 'Pending', 4),
(3, 'Delivered', 3),
(4, 'Pending', 5),
(5, 'Delivered', 1);

-- INNER JOIN: Повертає лише ті записи, у яких є відповідність в обох таблицях
SELECT Customers.first_name, Customers.last_name, Orders.item, Orders.amount
FROM Customers
INNER JOIN Orders ON Customers.customer_id = Orders.customer_id;

-- LEFT JOIN (LEFT OUTER JOIN): Повертає всі записи з лівої таблиці (Customers) і відповідні з правої (Orders), якщо вони є
SELECT Customers.first_name, Customers.last_name, Orders.item, Orders.amount
FROM Customers
LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id;

-- RIGHT JOIN (RIGHT OUTER JOIN): Повертає всі записи з правої таблиці (Orders) і відповідні з лівої (Customers), якщо вони є
SELECT Customers.first_name, Customers.last_name, Orders.item, Orders.amount
FROM Customers
RIGHT JOIN Orders ON Customers.customer_id = Orders.customer_id;

-- FULL JOIN (FULL OUTER JOIN): Повертає всі записи з обох таблиць, якщо немає відповідності – підставляє NULL
SELECT Customers.first_name, Customers.last_name, Orders.item, Orders.amount
FROM Customers
FULL OUTER JOIN Orders ON Customers.customer_id = Orders.customer_id;

-- CROSS JOIN: Виконує декартовий добуток, повертає всі можливі комбінації рядків з обох таблиць
SELECT Customers.first_name, Customers.last_name, Orders.item, Orders.amount
FROM Customers
CROSS JOIN Orders;

-- SELF JOIN: Дозволяє об'єднати таблицю саму з собою, наприклад, знайти клієнтів з однаковим віком
SELECT A.first_name AS customer1, B.first_name AS customer2, A.age
FROM Customers A
JOIN Customers B ON A.age = B.age AND A.customer_id <> B.customer_id;

-- LEFT JOIN + WHERE IS NULL: Визначає клієнтів, які не зробили жодного замовлення
SELECT Customers.first_name, Customers.last_name
FROM Customers
LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id
WHERE Orders.customer_id IS NULL;
